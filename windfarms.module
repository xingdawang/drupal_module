<?php
/**
 * @file
 * Custom functionality for a wind form databse
 */

/**
 * Implements hook_help().
 * in help
 */

function windfarms_help($path, $arg){
	switch ($path) {
		case 'admin/help#windfarms':{
			$ret_val = '<h3>' . t('About ') . '</h3>';
			$ret_val = '<p>' . t('The wind farms module make it easy to manage the database') . '</p>';
			return $ret_val;
		}
	}
}

/**
 * Implement hook_permission()
 * in people/permission
 */
function windfarms_permission() {
  return array(
    'administer my module' => array(
      'title' => t('Administer my module'),
      'description' => t('Perform administration tasks for my module.'),
    ),
  );
}

/**
 * Implement hook_menu()
 *  in configuration
 */
function windfarms_menu() {
	$items = array();
	
	//Admin config group
	$items['admin/config/windfarms'] = array(
		'title' => 'Wind Farms',
		'description' => 'Admin Wind Farms',
		'access arguments' => array('admin wind farms'),
	);

	//Admin configuration - settings
	$items['admin/config/windfarms/management'] = array(
		'title' => 'Wind Farms Management',
		'description' => 'Manage wind farm settings and configuration',
		'access arguments' => array('admin wind farms'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('windfarms_admin_settings_form'),
	);

	return $items;
}

/**
 * Implements hook_form().
 */
function windfarms_admin_settings_form($node, &$form_state) {
	$form = array();

	$form['overview'] = array(
		'#markup' => t('This interface allows administrators to manage general Wind Farm Settings'),
		'#prefix' => '<p>',
		'#suffix' => '</p>',
	);

	$form['windfarms_gmap'] = array(
		'#title' => t('Enable Google Maps'),
		'#description' => t('When enabled, Google Maps will be rendered if latitude and longitude are known.'),
		'#type' => 'checkbox',
		'#default_value' => variable_get('windfarms_gmap'),
	);

	$form['default_center'] = array(
		'#title' => t('Map Center'),
		'#description' => t('Location of the center of the map of wind farms.'),
		'#type' => 'fieldset',
		'#collapsible' => TRUE,
		'#collapsed' => FALSE,
	);

	$form['default_center']['windfarms_default_center_lat'] = array(
		'#title' => t('Latitude'),
		'#description' => t('Signed degrees format (DDD.dddd)'),
		'#type' => 'textfield',
		'#default_value' => variable_get('windfarms_default_center_lat'),
		'#required' => TRUE,
	);

	$form['default_center']['windfarms_default_center_long'] = array(
		'#title' => t('Longitude'),
		'#description' => t('Signed degrees format (DDD.dddd)'),
		'#type' => 'textfield',
		'#default_value' => variable_get('windfarms_default_center_long'),
		'#required' => TRUE,
	);

	$options = range(0, 20, 1);
	$options[0] = t('0 - Furthest');
	$options[20] = t('20 - Closest');

	$form['windfarms_default_gmap_zoom'] = array(
		'#title' => t('Google Map zoom'),
		'#description' => t('Default level of zoom, between 0 and 20.'),
		'#type' => 'select',
		'#options' => $options,
		'#default_value' => variable_get('windfarms_default_gmap_zoom'),
		'#required' => TRUE,
		);

	// $form['submit'] = array(
	// 	'#type' => 'submit',
	// 	'#value' => t('Save'),
	// );

	// return $form;
	return system_settings_form($form);
}

/**
 * Validate Wind Farms admin settings.
 */
function windfarms_admin_settings_form_validate($form, &$form_state) {
	// dpm($form_state['values']); // Can be used as a debug tool (Drupal Print Message)

	// Shorthand for long array names
	$lat = $form_state['values']['windfarms_default_center_lat'];
	$long = $form_state['values']['windfarms_default_center_long'];

	// Validate latitude and longitude format.
	if(!_windfarms_validate_signed_degrees($lat)) {
		form_set_error('windfarms_default_center_lat', t('Invalid latitude; must be a signed degree (DD.dddd).'));
	}
	if(!_windfarms_validate_signed_degrees($long)) {
		form_set_error('windfarms_default_center_long', t('Invalide longitude; must be s signed degree (DD.dddd)'));
	}

	// Validate latitude and longitude values
	if(!_windfarms_validate_geo_coord_range($lat)) {
		form_set_error('windfarms_default_center_lat', t('Latitude must be between -180 and 180'));
	}
	if(!_windfarms_validate_geo_coord_range($long)) {
		form_set_error('windfarms_default_center_long', t('Longitude must be between -180 and 180'));
	}
}
// /**
//  * Callback function. Process a validated wind farm admin setting submission.
//  */
// function windfarms_admin_settings_form_submit($form, &$form_state) {
// 	// Rebuild the forms
// 	$form_state['rebuild'] = TRUE;
// 	//persistent variables
// 	//variable_get | Get a value by name and optionally provides default value if the variable has never been set.
// 	//variable_set | Saves a value to the databse by name
// 	//variable_del | Delete a value from the databse by name

// 	// Save wind farm setting variables
// 	variable_set('windfarms_gmap', $form_state['values']['windfarms_gmap']);
// 	variable_set('windfarms_default_center_lat', $form_state['values']['windfarms_default_center_lat']);
// 	variable_set('windfarms_default_center_long', $form_state['values']['windfarms_default_center_long']);
// 	variable_set('windfarms_default_gmap_zoom', $form_state['values']['windfarms_default_gmap_zoom']);

// 	// Notify user
// 	drupal_set_message(t('Wind Farm settings saved.'));
// }


// From here is to validate the content type.
/**
 * Implements hook_form_alter().
 */
function windfarms_form_alter(&$form, &$form_state, $form_id) {
	switch ($form_id) {
		case 'Windfarm_node_form': {
			$form['#validate'][] = 'windfarms_windfarm_node_form_validate';
			break;
		}
	}
}

/**
 * Validate wind farm content type
 */
function windfarms_windfarm_node_form_validate($form, &$form_state) {
	// dpm($form_state);
	// form_set_error(' ', 'testing'); // Manually setup an error.

	// Validate Unite Count
	// In Drupal define('LANGUAGE_NONE', 'und')
	$value = $form_state['values']['windfarm_unit_count'][LANGUAGE_NONE][0]['value'];

	if($value !== "" && (!is_numeric($value) || intval($value) != $value || $value <= 0)){
		form_set_error('windfarm_unit_count', t('The number of units on a wind farm must be a positive whole number.'));
	}

	// Validate latitude
	$lat = $form_state['values']['windfarm_latitude'][LANGUAGE_NONE][0]['value'];
	if(!_windfarms_validate_geo_coord_range($lat) || !_windfarms_validate_signed_degrees($lat)){
		form_set_error('windfarm_latitude', t('Latitude must be valid coordinates in signed degrees.'));
	}

	// Validate longitude
	$long = $form_state['values']['windfarm_longitude'][LANGUAGE_NONE][0]['value'];
	if(!_windfarms_validate_geo_coord_range($long) || !_windfarms_validate_signed_degrees($long)){
		form_set_error('windfarm_longitude', t('Longitude must be valid coordinates in signed degrees.'));
	}
}

// function only used in this module is better to have a prefix '_'.
/**
 * Determin if a value is in signed degrees format.
 * @param string $value
 * 	The value to be tested.
 * @return boolean
 * 	TRUE if correctly formatted.
 */
function _windfarms_validate_signed_degrees($value) {
	$signed_degree_regex = '/^[+-]?\d+(\.\d+)?$/';
	return preg_match(signed_degree_regex, $value)? TRUE: FALSE; 
}

/**
 * Determin if a geographic coordinate is within the valid range
 * @param string $value
 * 	The value to be tested.
 * @return boolean
 * 	TRUE if between -180 and 180.
 */
function _windfarms_validate_geo_coord_range($value) {
	return ($value >= -180 && $value <= 180)? TRUE: FALSE;
}